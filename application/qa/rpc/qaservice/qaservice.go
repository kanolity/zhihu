// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: qa.proto

package qaservice

import (
	"context"

	"go_code/zhihu/application/qa/rpc/types/qa"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Answer                = qa.Answer
	AnswerReply           = qa.AnswerReply
	AnswerRequest         = qa.AnswerRequest
	CreateQuestionReply   = qa.CreateQuestionReply
	CreateQuestionRequest = qa.CreateQuestionRequest
	GetAnswersReply       = qa.GetAnswersReply
	GetAnswersRequest     = qa.GetAnswersRequest
	GetQuestionReply      = qa.GetQuestionReply
	GetQuestionRequest    = qa.GetQuestionRequest
	Question              = qa.Question

	QaService interface {
		CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionReply, error)
		GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionReply, error)
		AnswerQuestion(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error)
		GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersReply, error)
	}

	defaultQaService struct {
		cli zrpc.Client
	}
)

func NewQaService(cli zrpc.Client) QaService {
	return &defaultQaService{
		cli: cli,
	}
}

func (m *defaultQaService) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionReply, error) {
	client := qa.NewQaServiceClient(m.cli.Conn())
	return client.CreateQuestion(ctx, in, opts...)
}

func (m *defaultQaService) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionReply, error) {
	client := qa.NewQaServiceClient(m.cli.Conn())
	return client.GetQuestion(ctx, in, opts...)
}

func (m *defaultQaService) AnswerQuestion(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error) {
	client := qa.NewQaServiceClient(m.cli.Conn())
	return client.AnswerQuestion(ctx, in, opts...)
}

func (m *defaultQaService) GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersReply, error) {
	client := qa.NewQaServiceClient(m.cli.Conn())
	return client.GetAnswers(ctx, in, opts...)
}
