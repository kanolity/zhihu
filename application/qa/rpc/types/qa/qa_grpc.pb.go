// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: qa.proto

package qa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QaService_CreateQuestion_FullMethodName = "/qa.QaService/CreateQuestion"
	QaService_GetQuestion_FullMethodName    = "/qa.QaService/GetQuestion"
	QaService_AnswerQuestion_FullMethodName = "/qa.QaService/AnswerQuestion"
	QaService_GetAnswers_FullMethodName     = "/qa.QaService/GetAnswers"
)

// QaServiceClient is the client API for QaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QaServiceClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionReply, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionReply, error)
	AnswerQuestion(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error)
	GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersReply, error)
}

type qaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQaServiceClient(cc grpc.ClientConnInterface) QaServiceClient {
	return &qaServiceClient{cc}
}

func (c *qaServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionReply)
	err := c.cc.Invoke(ctx, QaService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaServiceClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionReply)
	err := c.cc.Invoke(ctx, QaService_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaServiceClient) AnswerQuestion(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerReply)
	err := c.cc.Invoke(ctx, QaService_AnswerQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaServiceClient) GetAnswers(ctx context.Context, in *GetAnswersRequest, opts ...grpc.CallOption) (*GetAnswersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswersReply)
	err := c.cc.Invoke(ctx, QaService_GetAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QaServiceServer is the server API for QaService service.
// All implementations must embed UnimplementedQaServiceServer
// for forward compatibility.
type QaServiceServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionReply, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionReply, error)
	AnswerQuestion(context.Context, *AnswerRequest) (*AnswerReply, error)
	GetAnswers(context.Context, *GetAnswersRequest) (*GetAnswersReply, error)
	mustEmbedUnimplementedQaServiceServer()
}

// UnimplementedQaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQaServiceServer struct{}

func (UnimplementedQaServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQaServiceServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQaServiceServer) AnswerQuestion(context.Context, *AnswerRequest) (*AnswerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestion not implemented")
}
func (UnimplementedQaServiceServer) GetAnswers(context.Context, *GetAnswersRequest) (*GetAnswersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswers not implemented")
}
func (UnimplementedQaServiceServer) mustEmbedUnimplementedQaServiceServer() {}
func (UnimplementedQaServiceServer) testEmbeddedByValue()                   {}

// UnsafeQaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QaServiceServer will
// result in compilation errors.
type UnsafeQaServiceServer interface {
	mustEmbedUnimplementedQaServiceServer()
}

func RegisterQaServiceServer(s grpc.ServiceRegistrar, srv QaServiceServer) {
	// If the following call pancis, it indicates UnimplementedQaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QaService_ServiceDesc, srv)
}

func _QaService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QaService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QaService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QaService_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServiceServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QaService_AnswerQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServiceServer).AnswerQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QaService_AnswerQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServiceServer).AnswerQuestion(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QaService_GetAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServiceServer).GetAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QaService_GetAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServiceServer).GetAnswers(ctx, req.(*GetAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QaService_ServiceDesc is the grpc.ServiceDesc for QaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.QaService",
	HandlerType: (*QaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QaService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _QaService_GetQuestion_Handler,
		},
		{
			MethodName: "AnswerQuestion",
			Handler:    _QaService_AnswerQuestion_Handler,
		},
		{
			MethodName: "GetAnswers",
			Handler:    _QaService_GetAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qa.proto",
}
