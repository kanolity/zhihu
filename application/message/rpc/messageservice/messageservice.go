// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: message.proto

package messageservice

import (
	"context"

	"go_code/zhihu/application/message/rpc/types/message"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMessagesReply   = message.GetMessagesReply
	GetMessagesRequest = message.GetMessagesRequest
	MarkAsReadReply    = message.MarkAsReadReply
	MarkAsReadRequest  = message.MarkAsReadRequest
	Message            = message.Message
	SendMessageReply   = message.SendMessageReply
	SendMessageRequest = message.SendMessageRequest

	MessageService interface {
		SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
		GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error)
		MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadReply, error)
	}

	defaultMessageService struct {
		cli zrpc.Client
	}
)

func NewMessageService(cli zrpc.Client) MessageService {
	return &defaultMessageService{
		cli: cli,
	}
}

func (m *defaultMessageService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

func (m *defaultMessageService) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.GetMessages(ctx, in, opts...)
}

func (m *defaultMessageService) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadReply, error) {
	client := message.NewMessageServiceClient(m.cli.Conn())
	return client.MarkAsRead(ctx, in, opts...)
}
