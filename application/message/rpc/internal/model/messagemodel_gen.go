// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageFieldNames          = builder.RawFieldNames(&Message{})
	messageRows                = strings.Join(messageFieldNames, ",")
	messageRowsExpectAutoSet   = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageRowsWithPlaceHolder = strings.Join(stringx.Remove(messageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messageModel interface {
		Insert(ctx context.Context, data *Message) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Message, error)
		Update(ctx context.Context, data *Message) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Message struct {
		Id         uint64    `db:"id"`          // 消息ID
		Type       int64     `db:"type"`        // 类型：0系统，1点赞，2评论…
		BizId      string    `db:"biz_id"`      // 业务ID（如文章、问题等）
		TargetId   uint64    `db:"target_id"`   // 业务目标ID
		ReceiverId uint64    `db:"receiver_id"` // 接收者
		Title      string    `db:"title"`       // 标题
		Content    string    `db:"content"`     // 正文内容
		IsRead     bool      `db:"is_read"`     // 是否已读
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newMessageModel(conn sqlx.SqlConn) *defaultMessageModel {
	return &defaultMessageModel{
		conn:  conn,
		table: "`message`",
	}
}

func (m *defaultMessageModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMessageModel) FindOne(ctx context.Context, id uint64) (*Message, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messageRows, m.table)
	var resp Message
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, data *Message) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, messageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Type, data.BizId, data.TargetId, data.ReceiverId, data.Title, data.Content, data.IsRead)
	return ret, err
}

func (m *defaultMessageModel) Update(ctx context.Context, data *Message) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Type, data.BizId, data.TargetId, data.ReceiverId, data.Title, data.Content, data.IsRead, data.Id)
	return err
}

func (m *defaultMessageModel) tableName() string {
	return m.table
}
