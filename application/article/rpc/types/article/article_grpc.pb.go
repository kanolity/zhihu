// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Article_Publish_FullMethodName              = "/article.Article/Publish"
	Article_Articles_FullMethodName             = "/article.Article/Articles"
	Article_ArticleDelete_FullMethodName        = "/article.Article/ArticleDelete"
	Article_ArticleDetail_FullMethodName        = "/article.Article/ArticleDetail"
	Article_ArticleReplyIncrease_FullMethodName = "/article.Article/ArticleReplyIncrease"
	Article_ApproveArticle_FullMethodName       = "/article.Article/ApproveArticle"
	Article_RejectArticle_FullMethodName        = "/article.Article/RejectArticle"
	Article_GetPendingArticles_FullMethodName   = "/article.Article/GetPendingArticles"
)

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// 发布文章
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// 查看某用户的所有文章
	Articles(ctx context.Context, in *ArticlesRequest, opts ...grpc.CallOption) (*ArticlesResponse, error)
	// 删除文章
	ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error)
	// 文章详情
	ArticleDetail(ctx context.Context, in *ArticleDetailRequest, opts ...grpc.CallOption) (*ArticleDetailResponse, error)
	ArticleReplyIncrease(ctx context.Context, in *ArticleReplyIncreaseRequest, opts ...grpc.CallOption) (*ArticleReplyIncreaseResponse, error)
	// 后台：审核通过
	ApproveArticle(ctx context.Context, in *ArticleApproveRequest, opts ...grpc.CallOption) (*ArticleApproveResponse, error)
	// 后台：审核驳回
	RejectArticle(ctx context.Context, in *ArticleRejectRequest, opts ...grpc.CallOption) (*ArticleRejectResponse, error)
	// 后台：待审核或驳回文章列表
	GetPendingArticles(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*AdminListResponse, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, Article_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) Articles(ctx context.Context, in *ArticlesRequest, opts ...grpc.CallOption) (*ArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticlesResponse)
	err := c.cc.Invoke(ctx, Article_Articles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleDeleteResponse)
	err := c.cc.Invoke(ctx, Article_ArticleDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleDetail(ctx context.Context, in *ArticleDetailRequest, opts ...grpc.CallOption) (*ArticleDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleDetailResponse)
	err := c.cc.Invoke(ctx, Article_ArticleDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ArticleReplyIncrease(ctx context.Context, in *ArticleReplyIncreaseRequest, opts ...grpc.CallOption) (*ArticleReplyIncreaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleReplyIncreaseResponse)
	err := c.cc.Invoke(ctx, Article_ArticleReplyIncrease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ApproveArticle(ctx context.Context, in *ArticleApproveRequest, opts ...grpc.CallOption) (*ArticleApproveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleApproveResponse)
	err := c.cc.Invoke(ctx, Article_ApproveArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) RejectArticle(ctx context.Context, in *ArticleRejectRequest, opts ...grpc.CallOption) (*ArticleRejectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleRejectResponse)
	err := c.cc.Invoke(ctx, Article_RejectArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) GetPendingArticles(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*AdminListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminListResponse)
	err := c.cc.Invoke(ctx, Article_GetPendingArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility.
type ArticleServer interface {
	// 发布文章
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// 查看某用户的所有文章
	Articles(context.Context, *ArticlesRequest) (*ArticlesResponse, error)
	// 删除文章
	ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error)
	// 文章详情
	ArticleDetail(context.Context, *ArticleDetailRequest) (*ArticleDetailResponse, error)
	ArticleReplyIncrease(context.Context, *ArticleReplyIncreaseRequest) (*ArticleReplyIncreaseResponse, error)
	// 后台：审核通过
	ApproveArticle(context.Context, *ArticleApproveRequest) (*ArticleApproveResponse, error)
	// 后台：审核驳回
	RejectArticle(context.Context, *ArticleRejectRequest) (*ArticleRejectResponse, error)
	// 后台：待审核或驳回文章列表
	GetPendingArticles(context.Context, *AdminListRequest) (*AdminListResponse, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticleServer struct{}

func (UnimplementedArticleServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedArticleServer) Articles(context.Context, *ArticlesRequest) (*ArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Articles not implemented")
}
func (UnimplementedArticleServer) ArticleDelete(context.Context, *ArticleDeleteRequest) (*ArticleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDelete not implemented")
}
func (UnimplementedArticleServer) ArticleDetail(context.Context, *ArticleDetailRequest) (*ArticleDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDetail not implemented")
}
func (UnimplementedArticleServer) ArticleReplyIncrease(context.Context, *ArticleReplyIncreaseRequest) (*ArticleReplyIncreaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleReplyIncrease not implemented")
}
func (UnimplementedArticleServer) ApproveArticle(context.Context, *ArticleApproveRequest) (*ArticleApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveArticle not implemented")
}
func (UnimplementedArticleServer) RejectArticle(context.Context, *ArticleRejectRequest) (*ArticleRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectArticle not implemented")
}
func (UnimplementedArticleServer) GetPendingArticles(context.Context, *AdminListRequest) (*AdminListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingArticles not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}
func (UnimplementedArticleServer) testEmbeddedByValue()                 {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	// If the following call pancis, it indicates UnimplementedArticleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_Articles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Articles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_Articles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Articles(ctx, req.(*ArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleDelete(ctx, req.(*ArticleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleDetail(ctx, req.(*ArticleDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ArticleReplyIncrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleReplyIncreaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ArticleReplyIncrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ArticleReplyIncrease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ArticleReplyIncrease(ctx, req.(*ArticleReplyIncreaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ApproveArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ApproveArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_ApproveArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ApproveArticle(ctx, req.(*ArticleApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_RejectArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).RejectArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_RejectArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).RejectArticle(ctx, req.(*ArticleRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_GetPendingArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetPendingArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Article_GetPendingArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetPendingArticles(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Article_Publish_Handler,
		},
		{
			MethodName: "Articles",
			Handler:    _Article_Articles_Handler,
		},
		{
			MethodName: "ArticleDelete",
			Handler:    _Article_ArticleDelete_Handler,
		},
		{
			MethodName: "ArticleDetail",
			Handler:    _Article_ArticleDetail_Handler,
		},
		{
			MethodName: "ArticleReplyIncrease",
			Handler:    _Article_ArticleReplyIncrease_Handler,
		},
		{
			MethodName: "ApproveArticle",
			Handler:    _Article_ApproveArticle_Handler,
		},
		{
			MethodName: "RejectArticle",
			Handler:    _Article_RejectArticle_Handler,
		},
		{
			MethodName: "GetPendingArticles",
			Handler:    _Article_GetPendingArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
