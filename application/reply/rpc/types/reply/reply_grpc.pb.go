// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: reply.proto

package reply

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReplyService_PostReply_FullMethodName   = "/reply.ReplyService/PostReply"
	ReplyService_GetReplies_FullMethodName  = "/reply.ReplyService/GetReplies"
	ReplyService_GetReplyNum_FullMethodName = "/reply.ReplyService/GetReplyNum"
)

// ReplyServiceClient is the client API for ReplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplyServiceClient interface {
	PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*PostReplyReply, error)
	GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesReply, error)
	GetReplyNum(ctx context.Context, in *GetReplyNumReq, opts ...grpc.CallOption) (*GetReplyNumResp, error)
}

type replyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplyServiceClient(cc grpc.ClientConnInterface) ReplyServiceClient {
	return &replyServiceClient{cc}
}

func (c *replyServiceClient) PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*PostReplyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostReplyReply)
	err := c.cc.Invoke(ctx, ReplyService_PostReply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepliesReply)
	err := c.cc.Invoke(ctx, ReplyService_GetReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replyServiceClient) GetReplyNum(ctx context.Context, in *GetReplyNumReq, opts ...grpc.CallOption) (*GetReplyNumResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReplyNumResp)
	err := c.cc.Invoke(ctx, ReplyService_GetReplyNum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplyServiceServer is the server API for ReplyService service.
// All implementations must embed UnimplementedReplyServiceServer
// for forward compatibility.
type ReplyServiceServer interface {
	PostReply(context.Context, *PostReplyRequest) (*PostReplyReply, error)
	GetReplies(context.Context, *GetRepliesRequest) (*GetRepliesReply, error)
	GetReplyNum(context.Context, *GetReplyNumReq) (*GetReplyNumResp, error)
	mustEmbedUnimplementedReplyServiceServer()
}

// UnimplementedReplyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplyServiceServer struct{}

func (UnimplementedReplyServiceServer) PostReply(context.Context, *PostReplyRequest) (*PostReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReply not implemented")
}
func (UnimplementedReplyServiceServer) GetReplies(context.Context, *GetRepliesRequest) (*GetRepliesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplies not implemented")
}
func (UnimplementedReplyServiceServer) GetReplyNum(context.Context, *GetReplyNumReq) (*GetReplyNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyNum not implemented")
}
func (UnimplementedReplyServiceServer) mustEmbedUnimplementedReplyServiceServer() {}
func (UnimplementedReplyServiceServer) testEmbeddedByValue()                      {}

// UnsafeReplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplyServiceServer will
// result in compilation errors.
type UnsafeReplyServiceServer interface {
	mustEmbedUnimplementedReplyServiceServer()
}

func RegisterReplyServiceServer(s grpc.ServiceRegistrar, srv ReplyServiceServer) {
	// If the following call pancis, it indicates UnimplementedReplyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReplyService_ServiceDesc, srv)
}

func _ReplyService_PostReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).PostReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplyService_PostReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).PostReply(ctx, req.(*PostReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_GetReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).GetReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplyService_GetReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).GetReplies(ctx, req.(*GetRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplyService_GetReplyNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplyServiceServer).GetReplyNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReplyService_GetReplyNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplyServiceServer).GetReplyNum(ctx, req.(*GetReplyNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplyService_ServiceDesc is the grpc.ServiceDesc for ReplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reply.ReplyService",
	HandlerType: (*ReplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostReply",
			Handler:    _ReplyService_PostReply_Handler,
		},
		{
			MethodName: "GetReplies",
			Handler:    _ReplyService_GetReplies_Handler,
		},
		{
			MethodName: "GetReplyNum",
			Handler:    _ReplyService_GetReplyNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reply.proto",
}
