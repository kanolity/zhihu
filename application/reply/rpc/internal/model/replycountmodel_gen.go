// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyCountFieldNames          = builder.RawFieldNames(&ReplyCount{})
	replyCountRows                = strings.Join(replyCountFieldNames, ",")
	replyCountRowsExpectAutoSet   = strings.Join(stringx.Remove(replyCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	replyCountRowsWithPlaceHolder = strings.Join(stringx.Remove(replyCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	replyCountModel interface {
		Insert(ctx context.Context, data *ReplyCount) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ReplyCount, error)
		Update(ctx context.Context, data *ReplyCount) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultReplyCountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ReplyCount struct {
		Id           uint64    `db:"id"`             // 主键ID
		BizId        string    `db:"biz_id"`         // 业务ID
		TargetId     uint64    `db:"target_id"`      // 评论目标id
		ReplyNum     int64     `db:"reply_num"`      // 评论总数
		ReplyRootNum int64     `db:"reply_root_num"` // 根评论总数
		CreateTime   time.Time `db:"create_time"`    // 创建时间
		UpdateTime   time.Time `db:"update_time"`    // 最后修改时间
	}
)

func newReplyCountModel(conn sqlx.SqlConn) *defaultReplyCountModel {
	return &defaultReplyCountModel{
		conn:  conn,
		table: "`reply_count`",
	}
}

func (m *defaultReplyCountModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultReplyCountModel) FindOne(ctx context.Context, id uint64) (*ReplyCount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyCountRows, m.table)
	var resp ReplyCount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyCountModel) Insert(ctx context.Context, data *ReplyCount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, replyCountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.ReplyNum, data.ReplyRootNum)
	return ret, err
}

func (m *defaultReplyCountModel) Update(ctx context.Context, data *ReplyCount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replyCountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.ReplyNum, data.ReplyRootNum, data.Id)
	return err
}

func (m *defaultReplyCountModel) tableName() string {
	return m.table
}
