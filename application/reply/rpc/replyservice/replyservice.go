// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: reply.proto

package replyservice

import (
	"context"

	"go_code/zhihu/application/reply/rpc/types/reply"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetRepliesReply   = reply.GetRepliesReply
	GetRepliesRequest = reply.GetRepliesRequest
	PostReplyReply    = reply.PostReplyReply
	PostReplyRequest  = reply.PostReplyRequest
	Reply             = reply.Reply

	ReplyService interface {
		PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*PostReplyReply, error)
		GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesReply, error)
	}

	defaultReplyService struct {
		cli zrpc.Client
	}
)

func NewReplyService(cli zrpc.Client) ReplyService {
	return &defaultReplyService{
		cli: cli,
	}
}

func (m *defaultReplyService) PostReply(ctx context.Context, in *PostReplyRequest, opts ...grpc.CallOption) (*PostReplyReply, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.PostReply(ctx, in, opts...)
}

func (m *defaultReplyService) GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesReply, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.GetReplies(ctx, in, opts...)
}
