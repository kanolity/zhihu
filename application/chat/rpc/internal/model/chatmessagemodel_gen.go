// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatMessageFieldNames          = builder.RawFieldNames(&ChatMessage{})
	chatMessageRows                = strings.Join(chatMessageFieldNames, ",")
	chatMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(chatMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(chatMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatMessageModel interface {
		Insert(ctx context.Context, data *ChatMessage) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ChatMessage, error)
		Update(ctx context.Context, data *ChatMessage) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultChatMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatMessage struct {
		Id         uint64    `db:"id"`          // 消息ID
		SessionId  uint64    `db:"session_id"`  // 所属会话
		SenderId   uint64    `db:"sender_id"`   // 发送者ID
		ReceiverId uint64    `db:"receiver_id"` // 接收者ID
		Content    string    `db:"content"`     // 内容
		MsgType    int64     `db:"msg_type"`    // 消息类型：0文字，1图片
		IsRead     bool      `db:"is_read"`     // 是否已读
		SendTime   time.Time `db:"send_time"`   // 发送时间
	}
)

func newChatMessageModel(conn sqlx.SqlConn) *defaultChatMessageModel {
	return &defaultChatMessageModel{
		conn:  conn,
		table: "`chat_message`",
	}
}

func (m *defaultChatMessageModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatMessageModel) FindOne(ctx context.Context, id uint64) (*ChatMessage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMessageRows, m.table)
	var resp ChatMessage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatMessageModel) Insert(ctx context.Context, data *ChatMessage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, chatMessageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.SenderId, data.ReceiverId, data.Content, data.MsgType, data.IsRead, data.SendTime)
	return ret, err
}

func (m *defaultChatMessageModel) Update(ctx context.Context, data *ChatMessage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatMessageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.SenderId, data.ReceiverId, data.Content, data.MsgType, data.IsRead, data.SendTime, data.Id)
	return err
}

func (m *defaultChatMessageModel) tableName() string {
	return m.table
}
