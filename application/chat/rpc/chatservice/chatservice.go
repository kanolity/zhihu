// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: chat.proto

package chatservice

import (
	"context"

	"go_code/zhihu/application/chat/rpc/types/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateSessionReply   = chat.CreateSessionReply
	CreateSessionRequest = chat.CreateSessionRequest
	GetMessagesReply     = chat.GetMessagesReply
	GetMessagesRequest   = chat.GetMessagesRequest
	Message              = chat.Message
	SendMessageReply     = chat.SendMessageReply
	SendMessageRequest   = chat.SendMessageRequest

	ChatService interface {
		CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error)
		SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
		GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error)
	}

	defaultChatService struct {
		cli zrpc.Client
	}
)

func NewChatService(cli zrpc.Client) ChatService {
	return &defaultChatService{
		cli: cli,
	}
}

func (m *defaultChatService) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionReply, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.CreateSession(ctx, in, opts...)
}

func (m *defaultChatService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

func (m *defaultChatService) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.GetMessages(ctx, in, opts...)
}
