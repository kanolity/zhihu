// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: user.proto

package userclient

import (
	"context"

	"go_code/zhihu/application/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangeAvatarRequest    = user.ChangeAvatarRequest
	ChangeAvatarResponse   = user.ChangeAvatarResponse
	FindByIdRequest        = user.FindByIdRequest
	FindByIdResponse       = user.FindByIdResponse
	FindByMobileRequest    = user.FindByMobileRequest
	FindByMobileResponse   = user.FindByMobileResponse
	FindByUsernameRequest  = user.FindByUsernameRequest
	FindByUsernameResponse = user.FindByUsernameResponse
	RegisterRequest        = user.RegisterRequest
	RegisterResponse       = user.RegisterResponse
	SendSmsRequest         = user.SendSmsRequest
	SendSmsResponse        = user.SendSmsResponse

	User interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
		FindByMobile(ctx context.Context, in *FindByMobileRequest, opts ...grpc.CallOption) (*FindByMobileResponse, error)
		FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...grpc.CallOption) (*FindByUsernameResponse, error)
		SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
		ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindById(ctx, in, opts...)
}

func (m *defaultUser) FindByMobile(ctx context.Context, in *FindByMobileRequest, opts ...grpc.CallOption) (*FindByMobileResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindByMobile(ctx, in, opts...)
}

func (m *defaultUser) FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...grpc.CallOption) (*FindByUsernameResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.FindByUsername(ctx, in, opts...)
}

func (m *defaultUser) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendSms(ctx, in, opts...)
}

func (m *defaultUser) ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangeAvatar(ctx, in, opts...)
}
