// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagResourceFieldNames          = builder.RawFieldNames(&TagResource{})
	tagResourceRows                = strings.Join(tagResourceFieldNames, ",")
	tagResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(tagResourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tagResourceRowsWithPlaceHolder = strings.Join(stringx.Remove(tagResourceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tagResourceModel interface {
		Insert(ctx context.Context, data *TagResource) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TagResource, error)
		Update(ctx context.Context, data *TagResource) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultTagResourceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TagResource struct {
		Id         uint64    `db:"id"`          // 主键ID
		BizId      string    `db:"biz_id"`      // 业务ID
		TargetId   uint64    `db:"target_id"`   // 内容id
		TagId      uint64    `db:"tag_id"`      // 标签id
		UserId     uint64    `db:"user_id"`     // 用户ID
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后修改时间
	}
)

func newTagResourceModel(conn sqlx.SqlConn) *defaultTagResourceModel {
	return &defaultTagResourceModel{
		conn:  conn,
		table: "`tag_resource`",
	}
}

func (m *defaultTagResourceModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTagResourceModel) FindOne(ctx context.Context, id uint64) (*TagResource, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tagResourceRows, m.table)
	var resp TagResource
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagResourceModel) Insert(ctx context.Context, data *TagResource) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tagResourceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.TagId, data.UserId)
	return ret, err
}

func (m *defaultTagResourceModel) Update(ctx context.Context, data *TagResource) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tagResourceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.BizId, data.TargetId, data.TagId, data.UserId, data.Id)
	return err
}

func (m *defaultTagResourceModel) tableName() string {
	return m.table
}
